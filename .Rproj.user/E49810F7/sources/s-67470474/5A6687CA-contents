# Text Mining: News Article Analysis

```{python}
import pandas as pd
import string
```

## Data Preparation

Berbeda dengan data tabular biasa, data teks termasuk pada kategori data *unstructured* atau tidak terstruktur, di mana data ini memiliki pendekatan analisis yang berbeda dibandingkan data terstruktur biasa.

Data teks yang akan di analisis adalah 249 judul dan rangkuman berita yang dimuat pada seksi "Maritim" di portal berita [KATADATA](https://katadata.co.id/) selama empat tahun terakhir. Data didapatkan dengan metode *web-scraping* menggunakan python (script terlampir pada file `news_scraping.py`)

```{python}
df = pd.read_csv("data/news_maritim.csv",index_col=0)
df.head()
```

Teks yang dianalisis adalah penggabungan antara teks pada kolom `title` (judul berita) dan `summary` (ringkasan berita):

```{r,echo=F,fig.align="center"}
knitr::include_graphics("assets/katadata.png",dpi = 250)
```


Karena informasi tersebut masih tersimpan di dalam dua kolom terpisah, maka kedua kolom tersebut akan digabung menjadi kolom baru bernama `text`:

```{python}
df['text'] = df['title'] + " "+ df['summary'] # join title & summary
df = df.drop(['link','title','summary'],axis=1) # remove cols

df.head()
```

## Text Cleaning

Tahapan pertama sebelum melakukan analisis data teks adalah dengan melakukan *cleaning* pada teks terlebih dahulu. Untuk teks berita ini tahapan yang dilakukan antara lain:

- Pengaturan konsistensi huruf besar/kecil
- Pengeliminasian stopwords
- Pengeliminasian angka dan tanda baca

### Lower text

```{python}
df.text = df.text.str.lower()
df.head()
```

### Stopwords removal

```{python}
from nltk.corpus import stopwords

list_stopwords = stopwords.words('indonesian')
print(list_stopwords[:20])
```

```{python}
df.text = df.text.apply(lambda x: ' '.join([word for word in str(x).split() if word not in list_stopwords]))
df.head()
```

### Remove digits & punctuations

```{python}
df.text = df.text.str.replace('[^\w\s]|\d+','').str.strip()
df.head()
```

## Exploratory Data Analysis

Setelah data dibersihkan, kita dapat melihat frekuensi kemunculan kata terbanyak dari keseluruhan berita:

### Word Frequency

```{python}
df.text.str.split(expand=True).stack().value_counts().head(15)
```

### Bigram Analysis

```{python}
from sklearn.feature_extraction.text import CountVectorizer

def get_bigrams(descriptions, n=None):
    vec = CountVectorizer(ngram_range = (2,2), max_features = 20000).fit(descriptions)
    bag_of_words = vec.transform(descriptions)
    sum_words = bag_of_words.sum(axis = 0) 
    words_freq = [(word, sum_words[0, i]) for word, i in vec.vocabulary_.items()]
    words_freq =sorted(words_freq, key = lambda x: x[1], reverse = True)
   
    return words_freq[:n]

pd.DataFrame(get_bigrams(df.text, n=25)).rename(columns={0: "Terms", 1: "Frequency"})
```

