# Regression: Analisis Jumlah Tangkapan

## Background

```{r,echo=F,fig.align="center"}
knitr::include_graphics("assets/flow.png",dpi = 300)
```

Dalam *machine learning*, metode *regression*(regresi) merupakan algoritma yang termasuk ke dalam *supervised learning*. Tujuannya adalah untuk memprediksi target yang memiliki nilai numerik. Regresi dapat dilakukan dengan menggunakan prediktor, baik berupa numerik (angka) maupun kategorik. Untuk pemilihan prediktor akan dijelaskan di bab selanjutnya.

Studi kasus yang dimiliki KKP untuk model *regression* ini adalah untuk memprediksi jumlah tangkapan ikan berdasarkan 467 data kedatangan kapal di bulan Oktober 2020. Adapun data yang digunakan dibahas lebih dalam pada bab selanjutnya.

## Setup Library

Library yang akan dipakai dalam pemodelan regresi ini adalah:

- `pandas`: untuk proses manipulasi data.
- `numpy`: untuk pengolahan data numerik.
- `statsmodel`: untuk membuat permodelan machine learning.
- `matplotlib` : melakukan visualisasi
- `seaborn` : melakukan visualisasi

```{python}
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# suppress warning
import warnings
warnings.filterwarnings("ignore")

```

## Data Preparation
Tahap awal dari proses machine learning adalah menyiapkan data. Data yang dipakai untuk pemodelan regresi adalah data `data_kedatangan.csv`. Sebagai tahapan awal, dilakukan proses cleaning data yang mencakup:

- Pengeliminasian nilai NA/kosong
- Pengaturan konsistensi nama kolom
- Penyesuaian tipe data dari setiap kolom

```{python}
cols = ["id_kapal", "tgl_kedatangan","n_berlayar","no_slo","tgl_terbit_slo","hpkd","tgl_hpkd","alat_tangkap","jenis_tangkapan","jumlah_tangkapan"]
kapal = pd.read_csv("data/data_kedatangan.csv", parse_dates=["tgl_kedatangan"],names=cols)
kapal = kapal.dropna()

kapal[['alat_tangkap','jenis_tangkapan']] = kapal[['alat_tangkap','jenis_tangkapan']].astype('category')
kapal['jumlah_tangkapan'] = kapal['jumlah_tangkapan'].astype('int64')
```

## Exploratory Data Analysis


```{python}
kapal.boxplot(column = ['jumlah_tangkapan'])
```

Jika kita lihat hasil dari boxplot di atas, ternyata banyak sekali observasi yang memiliki nilai ekstrim(outlier). Dari data hasil tangkapan ikan akan dinyatakan ekstrim apabila hasil tangkapannya lebih dari ~19.000 jumlah tangkapan ikan. Kita juga bisa lihat bagaimana statistika deskripsi dari jumlah tangkapan ikan sebagai berikut:

```{python}
kapal['jumlah_tangkapan'].describe()
```

Selain itu, kita juga bisa mengecek nilai korelasi prediktor dengan targetnya. Pada contoh dibawah, kita akan lihat korelasi atau hubungan antara variabel jumlah tangkapan dengan jumlah lamanya kapal berlayar.

```{python}
kapal[['jumlah_tangkapan', 'n_berlayar']].corr()
```

Hasil di atas menunjukkan korelasi/hubungan yang cenderung lemah karena nilainya mendekati 0 yaitu sebesar 0.198. Perlu diperhatikan, variabel prediktor yang baik digunakan adalah variabel yang memiliki nilai korelasi yang tinggi/kuat terhadap variabel targetnya.

## Simple Linear Model

Model pertama yang akan digunakan adalah Ordinary Least Square(OLS). Sebagai langkah awal pemodelan, kita akan mencoba memprediksi variabel target dengan hanya menggunakan 1 variabel prediktor. 

```{python}
kapal.head()
```

```{python}
plt.scatter(kapal['n_berlayar'],kapal['jumlah_tangkapan'])
```

Jika dilihat dari scatter plot di atas, tidak terlalu tampak pola antara variabel `jumlah_tangkapan` dan `n_berlayar`.

Sebelum dilakukan proses fitting model, data di persiapkan terlebih dahulu untuk dilakukan permodelan. Adapun proses yang dilakukan pada tahapan ini adalah:

- Menentukan variabel target dan variabel prediktor
- Melakukan training model
- Memprediksi data
- Mengevaluasi kebaikan model

```{python}
# Data Preparation
import statsmodels.api as sm

X = sm.add_constant(kapal['n_berlayar'])
y = kapal['jumlah_tangkapan']

# Model Initialization and Configuration 
lm = sm.OLS(y, X)

# Model Train
lm = lm.fit() 
```

```{python}
lm.summary()
```

**Note**: Dari hasil summary di atas, model `lm` hasilnya memiliki nilai R-square sebesar **0.038** dimana nilai ini sangat jauh dari 1. Artinya, model yang dibuat kurang memungkinkan untuk nantinya dijadikan sebagai acuan prediksi.

```{python}
df = kapal.loc[:,['n_berlayar','jumlah_tangkapan']]

y_predict = lm.predict(X)

# save predicted value using statmodel's OLS into `df` for comparison purpose
df['y_predict'] = y_predict
df.head()
```

```{python}
plt.scatter(df['n_berlayar'], df['jumlah_tangkapan'])
plt.plot(df['n_berlayar'], df['y_predict'], c='r')
plt.xlabel('Jumlah hari kapal berlayar')
plt.ylabel("jumlah tangkapan")
plt.title("Jumlah hari kapal berlayar vs jumlah tangkapan")
```

Dilihat dari hasil prediksi, banyak observasi yang tidak fit dengan garis linear. Itu artinya error yang dihasilkan juga sangat besar mengingat selisih nilai prediksi dengan nilai aktualnya cukup jauh. Perhitungan nilai error akan dirangkum setelah pembuatan model multiple linear regression.

## Multiple Regression Model

Setelah membuat model sederhana dengan hanya menggunakan 1 prediktor, kita akan mencoba menambahkan prediktor lain ke dalam model. Papa model ini kami menambahkan 1 prediktor yaitu `alat_tangkap`. Karena variabel alat_tangkap berisi nilai kategorik, sebelum pemodelan kolom tersebut akan dibuatkan dummy variabelnya (Dummy Variable: Mengkuantifikasi nilai yang kategorik. Nilai yang bersifat kategorik akan ditransformasi menjadi kolom dengan nilai biner (1 atau 0). 

```{python}
kapal_multi = kapal.loc[:,['jumlah_tangkapan','n_berlayar','alat_tangkap']]
kapal_multi = pd.get_dummies(data=kapal_multi, drop_first=True)
```

```{python}
kapal_multi.head()
```

```{python}
sns.heatmap(kapal_multi.corr(), annot=True, cmap='YlGnBu', lw=0.5)
```

Hasil korelasi di atas menunjukkan bahwa variabel alat tangkap *Purse Seine* memiliki korelasi yang cukup kuat dengan variabel hasil tangkapan.

### Fitting Model

```{python}
y1 = kapal['jumlah_tangkapan']
X2 = sm.add_constant(kapal_multi.iloc[:,1:12]) 

# fit the model
model2 = sm.OLS(y1, X2).fit()
model2.summary()
```

```{python}
pd.DataFrame({
    'model': ['lm','model2'],
    'r-squared': [lm.rsquared, model2.rsquared],
    'adj. r-squared': [lm.rsquared_adj, model2.rsquared_adj]
})
```

Dari hasil summary dan perbandingan R-Squared didapatkan bahwa model ke 2 dengan 2 prediktor lebih baik daripada model sebelumnya yaitu sekitar 40.8%, ini artinya dengan menambahkan variabel baru pada model maka semakin bisa prediktor tersebut menjelaskan data target. 

Note : ini bukan berarti semakin banyak variabel maka semakin bagus model, terkadang banyaknya prediktor yang tidak signifikan juga akan mengganggu performa model.

### Prediksi

```{python}
df2 = kapal_multi

y_predict_multi = model2.predict(X2)

# save predicted value using statmodel's OLS into `df` for comparison purpose
df2['y_predict_multi'] = y_predict_multi
df2['y_predict_multi'].tail()
```

### Evaluasi Model

```{python}
from statsmodels.tools.eval_measures import rmse, mse


print("Model lm4 RMSE:",rmse(y, lm.predict(X)))
print("Model lm4 RMSE:",mse(y, lm.predict(X)))

print("Model lm4 RMSE:",rmse(y1, model2.predict(X2)))
print("Model lm4 RMSE:",mse(y1, model2.predict(X2)))
```

Hasil Evaluasi menunjukkan bahwa error yang dihasilkan oleh kedua model sangat besar jika dilihat dari range data asli hasil tangkapan ikan. Banyak faktor yang mempengaruhi hal ini, misalnya:

- Banyak terdapat nilai outlier
- Jumlah variabel prediktor yang digunakan sangat sedikit sehingga kurang mampu menjelaskan model
- Range nilai antar data cukup besar sehingga perlu dilakukan proses transformasi data, dll

## Asumsi
### Normality

```{python}
from scipy.stats import shapiro

name = {0: 'Statistics',1: 'p-value'}
pd.DataFrame({shapiro(model2.resid)}).rename(columns=name)
```

- $H_0$ : residuals model normal  
- $H_1$ : residuals model is not normal  
    
Nilai p-value yang di dapatkan < alpha =0.05 sehingga kita akan menolak H0 itu artinya residual model menyebar tidak normal.

### No Heteroscedasticity

```{python}
import statsmodels.stats.api as sms

name = {0: 'Lagrange multiplier statistic',
       1: 'p-value',
       2: 'f-value',
       3: 'f p-value'}

pd.DataFrame({
    sms.het_breuschpagan(model2.resid, model2.model.exog)
}).rename(columns= name)
```

- $H_0$ : residuals model doesn't have pattern (homoskedasticity)
- $H_1$ : residuals model have pattern (heteroskedasticity)

Nilai `p-value` yang di dapatkan < alpha =0.05 sehingga kita akan menolak H0 itu artinya residual model masih memiliki pola. 

Dari cek asumsi yang telah dilakukan, tidak ada asumsi yang terpenuhi.

## Kesimpulan

Data kedatangan kapal ini kurang cocok untuk dimodelkan dengan regresi linear karena minim akan variabel prediktor yang bisa digunakan. Adapun nilai korelasi antar variabel prediktor terhadap target dengan variabel cenderung rendah/ tidak berkorelasi, sehingga pola dari jumlah tangkapan tidak dapat digambarkan dengan baik jika hanya menggunakan `n_berlayar` dan `alat_tangkap` sebagai prediktor.

Jika ingin memperbaiki performa model disarankan untuk:

- Menambah jumlah variabel numerik/kategorik yang selaras dengan jumlah tangkapan kapal (Contoh: jenis kapal, ukuran kapal, dsb.) 

